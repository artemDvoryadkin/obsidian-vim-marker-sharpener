import { ParserMarkdown } from '../ParserMarkdown'; // Импортируем функцию, которую будем тестировать
describe('parseMarkdown', () => {
    it('рабочий пример', () => {
        const input = '**Hello** __World__ test ** test';
        const parser = new ParserMarkdown();
        const output = parser.parseLine(input);
        console.log("result", output);
    });
    const testCases = [
        { input: '**Hello** __World__' },
        { input: '**H ello**' },
        { input: ' Do not wrap lines.' }
    ];
    testCases.forEach(testCase => {
        it(`Пример: ${testCase.input}`, () => {
            const parser = new ParserMarkdown();
            const output = parser.parseLine(testCase.input);
            console.log("result", output);
            const resultText = output.reduce((acc, item) => acc + item.content, "");
            expect(resultText).toEqual(testCase.input);
        });
    });
    // Добавьте больше тестов по мере необходимости
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFyc2VyTWFya2Rvd24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlBhcnNlck1hcmtkb3duLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDLENBQUMsaURBQWlEO0FBRXJHLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzlCLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDekIsTUFBTSxLQUFLLEdBQUcsa0NBQWtDLENBQUM7UUFDakQsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxTQUFTLEdBQUc7UUFDakIsRUFBRSxLQUFLLEVBQUUscUJBQXFCLEVBQUU7UUFDaEMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFO1FBQ3ZCLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFO0tBQ2hDLENBQUE7SUFDRCxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBRTVCLEVBQUUsQ0FBQyxXQUFXLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUU7WUFDcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFFdkUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLCtDQUErQztBQUNoRCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlck1hcmtkb3duIH0gZnJvbSAnLi4vUGFyc2VyTWFya2Rvd24nOyAvLyDQmNC80L/QvtGA0YLQuNGA0YPQtdC8INGE0YPQvdC60YbQuNGOLCDQutC+0YLQvtGA0YPRjiDQsdGD0LTQtdC8INGC0LXRgdGC0LjRgNC+0LLQsNGC0YxcblxuZGVzY3JpYmUoJ3BhcnNlTWFya2Rvd24nLCAoKSA9PiB7XG5cdGl0KCfRgNCw0LHQvtGH0LjQuSDQv9GA0LjQvNC10YAnLCAoKSA9PiB7XG5cdFx0Y29uc3QgaW5wdXQgPSAnKipIZWxsbyoqIF9fV29ybGRfXyB0ZXN0ICoqIHRlc3QnO1xuXHRcdGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXJNYXJrZG93bigpO1xuXHRcdGNvbnN0IG91dHB1dCA9IHBhcnNlci5wYXJzZUxpbmUoaW5wdXQpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJyZXN1bHRcIiwgb3V0cHV0KTtcblxuXHR9KTtcblxuXHRjb25zdCB0ZXN0Q2FzZXMgPSBbXG5cdFx0eyBpbnB1dDogJyoqSGVsbG8qKiBfX1dvcmxkX18nIH0sXG5cdFx0eyBpbnB1dDogJyoqSCBlbGxvKionIH0sXG5cdFx0eyBpbnB1dDogJyBEbyBub3Qgd3JhcCBsaW5lcy4nIH1cblx0XVxuXHR0ZXN0Q2FzZXMuZm9yRWFjaCh0ZXN0Q2FzZSA9PiB7XG5cblx0XHRpdChg0J/RgNC40LzQtdGAOiAke3Rlc3RDYXNlLmlucHV0fWAsICgpID0+IHtcblx0XHRcdGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXJNYXJrZG93bigpO1xuXHRcdFx0Y29uc3Qgb3V0cHV0ID0gcGFyc2VyLnBhcnNlTGluZSh0ZXN0Q2FzZS5pbnB1dCk7XG5cdFx0XHRjb25zb2xlLmxvZyhcInJlc3VsdFwiLCBvdXRwdXQpO1xuXHRcdFx0Y29uc3QgcmVzdWx0VGV4dCA9IG91dHB1dC5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICsgaXRlbS5jb250ZW50LCBcIlwiKVxuXG5cdFx0XHRleHBlY3QocmVzdWx0VGV4dCkudG9FcXVhbCh0ZXN0Q2FzZS5pbnB1dCk7XG5cdFx0fSk7XG5cdH0pXG5cblx0Ly8g0JTQvtCx0LDQstGM0YLQtSDQsdC+0LvRjNGI0LUg0YLQtdGB0YLQvtCyINC/0L4g0LzQtdGA0LUg0L3QtdC+0LHRhdC+0LTQuNC80L7RgdGC0Lhcbn0pOyAiXX0=