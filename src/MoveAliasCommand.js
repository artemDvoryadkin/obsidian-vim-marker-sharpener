import { __awaiter } from "tslib";
import { Notice, MarkdownView } from 'obsidian';
export class MoveAliasCommand {
    constructor() {
        this.id = 'move-alias';
        this.name = 'Move alias';
    }
    execute(app) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeView = app.workspace.getActiveViewOfType(MarkdownView);
            if (!activeView) {
                new Notice('Активный редактор не найден.');
                return;
            }
            const editor = activeView.editor;
            const cursor = editor.getCursor();
            const currentLine = editor.getLine(cursor.line);
            const splitLine = currentLine.replace('-', '').split('->').map(part => part.trim());
            const alias = splitLine[0];
            const newFile = splitLine[1].slice(2, -2);
            const currentFile = activeView.file;
            const currentFileName = currentFile === null || currentFile === void 0 ? void 0 : currentFile.name.replace(/\.md$/, '');
            console.log(`Текущее название файла: ${currentFileName}`);
            console.log(`вводные данные`, { currentFileName, alias, newFile });
            const files = app.vault.getMarkdownFiles();
            console.log("Количество файлов в хранилище", files.length);
            const referencingFiles = [];
            const pagePatternRegexp = new RegExp(`\\[\\[(${currentFileName})\\|(${alias})\\]\\]|\\[(${alias})\\]\\((${currentFileName})\\)`, 'gi');
            console.log("Регулярное выражение:", pagePatternRegexp);
            const readPromises = files.map((file) => __awaiter(this, void 0, void 0, function* () {
                const content = yield app.vault.read(file);
                if (pagePatternRegexp.test(content)) {
                    referencingFiles.push(file.path);
                    const updatedContent = content.replace(pagePatternRegexp, (match, p1, p2, p3, p4) => {
                        if (p1) {
                            return match.replace(new RegExp(p1, 'i'), newFile);
                        }
                        else if (p4) {
                            return match.replace(new RegExp(p4, 'i'), newFile);
                        }
                        return match;
                    });
                    yield app.vault.modify(file, updatedContent);
                }
            }));
            yield Promise.all(readPromises);
            const newFilePath = files.find(file => file.path.includes(newFile + ".md"));
            if (newFilePath) {
                yield app.fileManager.processFrontMatter(newFilePath, (frontmatter) => {
                    if (!frontmatter.aliases) {
                        frontmatter.aliases = [];
                    }
                    if (!frontmatter.aliases.includes(alias)) {
                        frontmatter.aliases.push(alias);
                    }
                });
                console.log(`Алиас "${alias}" добавлен в frontmatter файла "${newFile}" через API`);
            }
            else {
                console.log(`Файл "${newFile}" не найден`);
            }
            editor.setLine(cursor.line, "");
            if (referencingFiles.length > 0) {
                const message = `Файлы, содержащие алиас ${alias}:\n${referencingFiles.join('\n')}`;
                new Notice(message);
                console.log(message);
            }
            else {
                const message = `Ссылок на алиас ${alias} не найдено`;
                new Notice(message);
                console.log(message);
            }
            new Notice(`Текущая строка: ${splitLine}`);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,